#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const webpack = require('webpack');
const winston = require('winston');
const fork = require('child_process').fork;
const config = require('../webpack/webpack.config.server');

const logger = winston.createLogger({
  format: winston.format.combine(
    winston.format.colorize(),
    winston.format.timestamp(),
    winston.format.label({ label: 'webpack-server' }),
    winston.format.align(),
    winston.format.printf(info => `${info.timestamp} ${info.level} ${info.label} - ${info.message}`),
  ),
  transports: [
    new winston.transports.Console(),
  ],
});

let caliopen;
const compiler = webpack(config);
compiler.apply(new webpack.ProgressPlugin({ profile: true }));

const start = () => {
  const watching = compiler.watch({
    aggregateTimeout: 300,
    poll: undefined,
  }, (err, stats) => {
    if (caliopen) {
      caliopen.kill();
    }

    logger.debug(stats.toString({ chunk: false, colors: true }));
    if (err || stats.hasErrors()) {
      logger.error('unable to compile');

      return;
    }
    logger.info('done');
    try {
      caliopen = fork(path.join(__dirname, '../dist/server/index.js'), { cwd: path.join(__dirname, '../') });
    } catch (forkErr) {
      logger.error('Unable to start caliopen express server. Wait for rebuild.');
      logger.debug(forkErr);
      if (caliopen) {
        caliopen.kill();
      }
    }
  });
};

const checkForPrerequisites = () => new Promise((resolve) => {
  fs.access(path.resolve(__dirname, '../dist/server/template.html'), fs.constants.R_OK, (err) => {
    if (!err) {
      resolve(true);
    }
  });

  const intervalId = setInterval(() => {
    logger.info('check for presence of template.html in dist/server/ directory');
    fs.access(path.resolve(__dirname, '../dist/server/template.html'), fs.constants.R_OK, (err) => {
      if (!err) {
        clearInterval(intervalId);
        resolve(true);
      }
    });
  }, 30 * 1000);
});

checkForPrerequisites().then(() => {
  logger.info('Prerequisites OK. Start server compilation');
  start();
});
